#!/usr/bin/env bash
# SPDX-License-Identifier: Apache-2.0 OR CC0-1.0
# Copyright (c) 2025 Epiphanius Harald Wenzel
#
# Projekt: show_on_desktop_temp — Ordnerinhalte/Dateien temporär als Symlinks auf dem Desktop anzeigen
# Repository: https://github.com/Epiphanius/ShowOnDesktopTemp
# Autor: Epiphanius Harald Wenzel
# Danksagung: With the help of a Large Language Model.
#
# Lizenz:
# Dual-Lizenz: Apache-2.0 ODER CC0-1.0 (nach Ihrer Wahl).
# - Bei Weitergabe unter Apache-2.0: LICENSE.Apache-2.0 und NOTICE beilegen.
# - Bei Nutzung unter CC0-1.0: keine Beifügung erforderlich. Marken-/Patentrechte unberührt.
# Siehe: LICENSE.Apache-2.0, LICENSE.CC0-1.0, NOTICE.
#
# Nautilus-Skript: show_on_desktop_temp
# Lokal (Ubuntu/Gnome 24.04+)
# - ORDNER: gesamten Inhalt als Symlinks anzeigen; optional zusätzlich Link auf den Quellordner.
# - DATEI(en): nur die Datei(en) verlinken; optional zusätzlich Link(s) auf die/den Quellordner der Datei(en).
# - Rechtsklick in freien Bereich: aktueller Ordner wird genutzt.
# - Evtl. zum Aktualisieren F5 auf dem Desktop drücken. Erneut ausführen = Leeren/Ersetzen.
# Statusdateien + Log: ~/.local/state/show_on_desktop_temp

set -euo pipefail
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

# ---------- Einstellungen ----------
CREATE_FOLDER_LINK="${CREATE_FOLDER_LINK:-1}"             # 1=auch Quellordner verlinken (Ordner- & Dateienmodus)
FOLDER_LINK_SUFFIX="${FOLDER_LINK_SUFFIX:- (Quelle)}"     # Namenszusatz für Quellordner-Link

# ---------- Hilfsfunktionen ----------
zen(){ zenity "$@" 2>/dev/null || return 1; }
sag_fehler(){ zen --error --title="Auf Desktop anzeigen (temporär)" --text="$1" || { notify-send "Auf Desktop anzeigen" "$1" 2>/dev/null || true; echo "FEHLER: $1" >&2; }; exit 1; }
sag_info(){ zen --info --title="Auf Desktop anzeigen (temporär)" --text="$1" || true; }
hinweis(){ notify-send "Auf Desktop anzeigen" "$1" 2>/dev/null || true; }
log(){ printf '%s %s\n' "$(date '+%F %T')" "$*" >> "$DEBUG_LOG"; }

# Desktop-Verzeichnis (sprachneutral ermitteln)
if ! DESKTOP_DIR="$(xdg-user-dir DESKTOP 2>/dev/null)"; then DESKTOP_DIR="$HOME/Desktop"; fi
[ -d "$DESKTOP_DIR" ] || sag_fehler "Desktop-Ordner nicht gefunden: $DESKTOP_DIR"

# Status + Log (NICHT auf dem Desktop)
STATE_DIR="${XDG_STATE_HOME:-$HOME/.local/state}/show_on_desktop_temp"
mkdir -p "$STATE_DIR"
MARKER_FILE="$STATE_DIR/active_from"
MANIFEST_FILE="$STATE_DIR/manifest.nul"
DEBUG_LOG="$STATE_DIR/debug.log"
: > "$DEBUG_LOG"
log "DESKTOP_DIR=$DESKTOP_DIR CREATE_FOLDER_LINK=$CREATE_FOLDER_LINK FOLDER_LINK_SUFFIX='$FOLDER_LINK_SUFFIX'"

# ---------- Auswahl einlesen ----------
AUSGEWAEHLT=()
if [ -n "${NAUTILUS_SCRIPT_SELECTED_FILE_PATHS:-}" ]; then
  while IFS= read -r line || [ -n "${line:-}" ]; do
    [ -n "${line:-}" ] && AUSGEWAEHLT+=("$line")
  done <<< "${NAUTILUS_SCRIPT_SELECTED_FILE_PATHS}"
fi

# URIs (file://) zu Pfaden
if [ ${#AUSGEWAEHLT[@]} -eq 0 ] && [ -n "${NAUTILUS_SCRIPT_SELECTED_URIS:-}" ]; then
  while IFS= read -r uri || [ -n "${uri:-}" ]; do
    [ -z "${uri:-}" ] && continue
    case "$uri" in
      file://*)
        p="$(gio info -a unix::path "$uri" 2>/dev/null | sed -n 's/^ *unix::path: *//p' || true)"
        if [ -z "$p" ]; then raw="${uri#file://}"; p="$(printf '%b' "${raw//%/\\x}")"; fi
        [ -n "$p" ] && AUSGEWAEHLT+=("$p")
        ;;
    esac
  done <<< "${NAUTILUS_SCRIPT_SELECTED_URIS}"
fi

# Fallback: aktueller Ordner bei Rechtsklick in freien Bereich
CURRENT_DIR=""
if [ ${#AUSGEWAEHLT[@]} -eq 0 ] && [ -n "${NAUTILUS_SCRIPT_CURRENT_URI:-}" ]; then
  case "$NAUTILUS_SCRIPT_CURRENT_URI" in
    file://*)
      cdp="$(gio info -a unix::path "$NAUTILUS_SCRIPT_CURRENT_URI" 2>/dev/null | sed -n 's/^ *unix::path: *//p' || true)"
      if [ -z "$cdp" ]; then raw2="${NAUTILUS_SCRIPT_CURRENT_URI#file://}"; cdp="$(printf '%b' "${raw2//%/\\x}")"; fi
      [ -n "$cdp" ] && [ -d "$cdp" ] && CURRENT_DIR="$cdp"
      ;;
  esac
fi

log "ausgewaehlt_count=${#AUSGEWAEHLT[@]} current_dir='$CURRENT_DIR'"

# Ohne Auswahl + kein Current-Dir => Abbruch
if [ ${#AUSGEWAEHLT[@]} -eq 0 ] && [ -z "$CURRENT_DIR" ]; then
  sag_fehler "Keine Auswahl. Rechtsklick auf Ordner/Datei(en) oder in freien Bereich eines Ordners → Skripte → show_on_desktop_temp."
fi

# In Dateien vs. Ordner trennen
DATEIEN=() ORDNER=()
for p in "${AUSGEWAEHLT[@]}"; do
  if   [ -d "$p" ]; then ORDNER+=("$p")
  elif [ -f "$p" ]; then DATEIEN+=("$p")
  fi
done
# Fallback: nur Current-Dir
if [ ${#AUSGEWAEHLT[@]} -eq 0 ] && [ -n "$CURRENT_DIR" ]; then ORDNER+=("$CURRENT_DIR"); fi
log "ORDNER=${#ORDNER[@]} DATEIEN=${#DATEIEN[@]}"

# Modus bestimmen
MODUS=""   # "ordner" | "dateien"
SRC_DIR=""
if [ ${#ORDNER[@]} -eq 1 ] && [ ${#DATEIEN[@]} -eq 0 ]; then
  MODUS="ordner"; SRC_DIR="${ORDNER[0]}"
elif [ ${#ORDNER[@]} -eq 0 ] && [ ${#DATEIEN[@]} -ge 1 ]; then
  MODUS="dateien"
else
  sag_fehler "Bitte wählen Sie ENTWEDER GENAU EINEN Ordner ODER eine/mehrere Datei(en) (nicht gemischt)."
fi

# Desktop nicht auf dem Desktop anzeigen
if [ "$MODUS" = "ordner" ] && [ "$(realpath -s "$SRC_DIR")" = "$(realpath -s "$DESKTOP_DIR")" ]; then
  sag_fehler "Der Desktop kann nicht auf dem Desktop angezeigt werden."
fi

# Aktive Ansicht?
AKTIV=""
if [ -f "$MARKER_FILE" ] && [ -f "$MANIFEST_FILE" ]; then AKTIV="$(cat "$MARKER_FILE" || true)"; fi
log "AKTIV='$AKTIV'"

# ---------- Marker ----------
setze_marker_fuer_ordner(){ printf "Ordner: %s\n" "$1" > "$MARKER_FILE"; }
setze_marker_fuer_dateien(){
  local count="$#"; local namen=() i
  for i in "$@"; do namen+=("$(basename -- "$i")"); done
  local preview; preview="$(printf '%s, ' "${namen[@]:0:5}")"; preview="${preview%, }"
  printf "Dateien: %d (%s%s)\n" "$count" "$preview" $([ $count -gt 5 ] && echo ", …") > "$MARKER_FILE"
}

# ---------- Quellordner-Link(e) ----------
erstelle_quellordner_link(){
  local src="$1"
  # Desktop selber nie verlinken
  if [ "$(realpath -s "$src")" = "$(realpath -s "$DESKTOP_DIR")" ]; then
    log "Quellordner ist Desktop -> übersprungen"
    echo "SKIPPED"; return 1
  fi
  local basis; basis="$(basename -- "$src")"
  local name="$basis$FOLDER_LINK_SUFFIX"
  local link="$DESKTOP_DIR/$name"
  if [ -e "$link" ] || [ -L "$link" ]; then
    log "Überspringe Quellordner-Link (existiert): $link"
    echo "SKIPPED"; return 1
  fi
  log "ln -s -- $src -> $link  (Quellordner)"
  ln -s -- "$src" "$link"
  printf "%s\0" "$link" >> "$MANIFEST_FILE"
  echo "CREATED"; return 0
}

erstelle_quellordner_links_fuer_parents(){
  # erhält eine Liste von Ordnerpfaden; legt je Quellordner genau einen Link an
  local created=0 skipped=0
  declare -A seen=()
  local d
  for d in "$@"; do
    [ -d "$d" ] || continue
    # Deduplizieren
    if [ -n "${seen[$(realpath -s "$d")]:-}" ]; then continue; fi
    seen[$(realpath -s "$d")]=1
    local st="$(erstelle_quellordner_link "$d" || true)"
    case "$st" in
      CREATED) created=$((created+1)) ;;
      SKIPPED) skipped=$((skipped+1)) ;;
    esac
  done
  echo "$created $skipped"
}

# ---------- Löschen ----------
leeren(){
  local entfernt=0
  if [ -f "$MANIFEST_FILE" ]; then
    while IFS= read -r -d '' item; do
      if [ -L "$item" ] || [ -f "$item" ]; then
        log "Entferne $item"
        rm -f -- "$item" && entfernt=$((entfernt+1))
      fi
    done < "$MANIFEST_FILE"
  fi
  rm -f -- "$MARKER_FILE" "$MANIFEST_FILE" 2>/dev/null || true
  hinweis "Temporäre Desktop-Ansicht geleert ($entfernt entfernt)."
  sag_info "Bereinigt.\n\nDrücken Sie F5 auf dem Desktop, falls die Symbole nicht aktualisiert wurden."
  log "Geleert: entfernt=$entfernt"
}

# ---------- Dateien/Ordner verlinken ----------
erstelle_links_fuer_dateien(){
  : > "$MANIFEST_FILE"
  setze_marker_fuer_dateien "$@"

  # (A) optional: Quellordner-Link(s) für Eltern der Dateien
  local parents=() p
  if [ "$CREATE_FOLDER_LINK" = "1" ]; then
    for p in "$@"; do parents+=("$(dirname -- "$p")"); done
    # dedupliziert & erstellt Links
    read -r q_created q_skipped <<< "$(erstelle_quellordner_links_fuer_parents "${parents[@]}")"
  else
    q_created=0; q_skipped=0
  fi

  # (B) Dateilinks
  local gesamt=0 erstellt=0 uebersprungen=0 pfad basis link
  for pfad in "$@"; do
    gesamt=$((gesamt+1))
    basis="$(basename -- "$pfad")"
    link="$DESKTOP_DIR/$basis"
    if [ -e "$link" ] || [ -L "$link" ]; then
      log "Überspringe (existiert): $link"
      uebersprungen=$((uebersprungen+1)); continue
    fi
    log "ln -s -- $pfad -> $link"
    ln -s -- "$pfad" "$link"
    printf "%s\0" "$link" >> "$MANIFEST_FILE"
    erstellt=$((erstellt+1))
  done

  local total_created=$((erstellt + q_created))
  local total_skipped=$((uebersprungen + q_skipped))
  hinweis "Datei-/Ordnerlinks: $total_created erstellt, $total_skipped übersprungen."
  sag_info "Erstellt: $erstellt Datei-Link(s)$([ "$q_created" -gt 0 ] && echo " + $q_created Quellordner-Link(s)").\nÜbersprungen: $total_skipped (Namenskollision/Fehler).\n\nDrücken Sie F5 zur Aktualisierung."
  log "erstelle_links_fuer_dateien: files_total=$gesamt files_created=$erstellt files_skipped=$uebersprungen parents_created=$q_created parents_skipped=$q_skipped"
}

erstelle_ansicht_aus_ordner(){
  local src="$1"
  : > "$MANIFEST_FILE"
  setze_marker_fuer_ordner "$src"

  local erstellt=0 uebersprungen=0 gesamt=0
  local ql_created=0 ql_skipped=0
  if [ "$CREATE_FOLDER_LINK" = "1" ]; then
    case "$(erstelle_quellordner_link "$src" || true)" in
      CREATED) ql_created=1 ;;
      SKIPPED) ql_skipped=1 ;;
    esac
  fi

  while IFS= read -r -d '' kind; do
    gesamt=$((gesamt+1))
    local basis; basis="$(basename -- "$kind")"
    local link="$DESKTOP_DIR/$basis"
    if [ -e "$link" ] || [ -L "$link" ]; then
      log "Überspringe (existiert): $link"
      uebersprungen=$((uebersprungen+1)); continue
    fi
    log "ln -s -- $kind -> $link"
    ln -s -- "$kind" "$link"
    printf "%s\0" "$link" >> "$MANIFEST_FILE"
    erstellt=$((erstellt+1))
  done < <(find "$src" -mindepth 1 -maxdepth 1 -print0)

  local total_created=$((erstellt + ql_created))
  local total_skipped=$((uebersprungen + ql_skipped))
  hinweis "Zeige $(basename "$src") auf dem Desktop: $total_created Link(s) erstellt, $total_skipped übersprungen."
  if [ "$gesamt" -eq 0 ]; then
    sag_info "Der ausgewählte Ordner ist leer.$([ "$ql_created" -eq 1 ] && echo "\nZusätzlich: Quellordner-Link angelegt.")\n\nDrücken Sie F5 zur Aktualisierung."
  else
    sag_info "Erstellt: $erstellt Link(s) aus:\n$src$([ "$ql_created" -eq 1 ] && echo "\nZusätzlich: Quellordner-Link: $(basename -- "$src")$FOLDER_LINK_SUFFIX").\n\nÜbersprungen: $total_skipped (Namenskollision/Fehler).\n\nDrücken Sie F5 zur Aktualisierung."
  fi
  log "erstelle_ansicht_aus_ordner: children_total=$gesamt children_created=$erstellt children_skipped=$uebersprungen folder_created=$ql_created folder_skipped=$ql_skipped"
}

waehle_eine_datei_aus_ordner(){
  local dir="$1"
  local ausgewaehlt
  ausgewaehlt="$(zen --file-selection --title='Eine Datei für die Anzeige auf dem Desktop auswählen' --filename="$dir/" || true)"
  [ -n "${ausgewaehlt:-}" ] || { log "Keine Datei gewählt"; return 1; }
  [ -f "$ausgewaehlt" ] || sag_fehler "Auswahl ist keine reguläre Datei:\n$ausgewaehlt"
  erstelle_links_fuer_dateien "$ausgewaehlt"
}

waehle_aktion(){
  if [ -n "$AKTIV" ]; then
    if [ "$MODUS" = "ordner" ]; then
      zen --list --title="Auf Desktop anzeigen (temporär)" \
        --text="Aktive temporäre Desktop-Ansicht:\n$AKTIV" \
        --column="Aktion" \
        "Aktuelle Ansicht leeren" \
        "Mit ausgewähltem Ordner ersetzen" \
        "Mit einer Datei aus diesem Ordner ersetzen" \
        "Abbrechen"
    else
      zen --list --title="Auf Desktop anzeigen (temporär)" \
        --text="Aktive temporäre Desktop-Ansicht:\n$AKTIV" \
        --column="Aktion" \
        "Aktuelle Ansicht leeren" \
        "Mit ausgewählten Datei(en) ersetzen" \
        "Abbrechen"
    fi
  else
    if [ "$MODUS" = "ordner" ]; then
      zen --list --title="Auf Desktop anzeigen (temporär)" \
        --text="Was möchten Sie mit folgendem Ordner tun?\n$SRC_DIR" \
        --column="Aktion" \
        "Ausgewählten Ordner anzeigen" \
        "Eine Datei aus diesem Ordner anzeigen" \
        "Abbrechen"
    else
      echo "Ausgewählte Datei(en) anzeigen"
    fi
  fi
}

# ---------- Hauptteil ----------
aktion="$(waehle_aktion || true)"
case "$aktion" in
  "Aktuelle Ansicht leeren") leeren ;;
  "Mit ausgewähltem Ordner ersetzen") leeren; erstelle_ansicht_aus_ordner "$SRC_DIR" ;;
  "Mit einer Datei aus diesem Ordner ersetzen") leeren; waehle_eine_datei_aus_ordner "$SRC_DIR" ;;
  "Ausgewählten Ordner anzeigen") erstelle_ansicht_aus_ordner "$SRC_DIR" ;;
  "Eine Datei aus diesem Ordner anzeigen") waehle_eine_datei_aus_ordner "$SRC_DIR" ;;
  "Mit ausgewählten Datei(en) ersetzen") leeren; erstelle_links_fuer_dateien "${DATEIEN[@]}" ;;
  "Ausgewählte Datei(en) anzeigen") erstelle_links_fuer_dateien "${DATEIEN[@]}" ;;
  "Abbrechen"|"" ) log "Abgebrochen"; exit 0 ;;
  * ) log "Unbekannte Aktion -> Ende"; exit 0 ;;
esac

